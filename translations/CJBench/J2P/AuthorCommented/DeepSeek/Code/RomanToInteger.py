






class RomanToIntegerConverter:
    roman_to_int = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    @staticmethod
    def roman_symbol_to_int(symbol: str) -> int:
        if symbol not in RomanToIntegerConverter.roman_to_int:
            raise ValueError(f"Unknown Roman symbol: {symbol}")
        return RomanToIntegerConverter.roman_to_int[symbol]

    @staticmethod
    def roman_to_int(roman: str) -> int:
        if roman is None:
            raise ValueError("Input cannot be null")

        roman = roman.upper()
        total = 0
        max_prev_value = 0
        for i in range(len(roman) - 1, -1, -1):
            current_value = RomanToIntegerConverter.roman_symbol_to_int(roman[i])
            if current_value >= max_prev_value:
                total += current_value
                max_prev_value = current_value
            else:
                total -= current_value

        return total


if __name__ == "__main__":
    import sys
    input_roman = sys.stdin.readline().strip()

    try:
        result = RomanToIntegerConverter.roman_to_int(input_roman)
        print(f"Integer value: {result}")
    except (ValueError, TypeError) as e:
        print(f"Error: {e}")













































































































































































































































































































































































































