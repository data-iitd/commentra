package main

import (
	"fmt"
	"sort"
)

var l []int

const limit = 10000000000

// Recursive function to generate numbers
func gen(number, four, seven int) {
	// Base case: if the number is greater than the limit, return
	if number > limit {
		return
	}

	// Recursive case 1: if the number is positive and four is equal to seven, append it to the list 'l'
	if number > 0 && four == seven {
		l = append(l, number)
	}

	// Recursive call for the next number generated by adding 10 to the current number and updating the values of 'four' and 'seven'
	gen(number*10+4, four+1, seven)

	// Recursive call for the next number generated by adding 10 to the current number and updating the values of 'four' and 'seven'
	gen(number*10+7, four, seven+1)
}

func main() {
	// Call the 'gen' function with initial values of 0, 0, and 0
	gen(0, 0, 0)

	// Sort the list 'l' in ascending order
	sort.Ints(l)

	// Read the input number 'n' from the user
	var n int
	fmt.Scan(&n)

	// Initialize the answer variable 'ans' to 0
	ans := 0

	// Iterate through the sorted list 'l' and find the first number that is greater than or equal to 'n'
	for _, val := range l {
		if val >= n {
			// Update the answer variable 'ans' with the found number and break the loop
			ans = val
			break
		}
	}

	// Print the answer
	fmt.Println(ans)
}

// <END-OF-CODE>
