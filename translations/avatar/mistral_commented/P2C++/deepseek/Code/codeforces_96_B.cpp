#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Initialize an empty vector 'l' to store the generated numbers
vector<long long> l;

// Set the limit value for the generated numbers
long long limit = 10000000000;

// Function definition to generate numbers recursively
void gen(long long number, int four, int seven) {
    // Base case: if the number is greater than the limit, return
    if (number > limit) {
        return;
    }

    // Recursive case 1: if the number is positive and four is equal to seven, append it to the vector 'l'
    if (number > 0 && four == seven) {
        l.push_back(number);
    }

    // Recursive call for the next number generated by adding 10 to the current number and updating the values of 'four' and 'seven'
    gen(number * 10 + 4, four + 1, seven);

    // Recursive call for the next number generated by adding 10 to the current number and updating the values of 'four' and 'seven'
    gen(number * 10 + 7, four, seven + 1);
}

// Main function definition
int main() {
    // Call the 'gen' function with initial values of 0, 0, and 0
    gen(0, 0, 0);

    // Sort the vector 'l' in ascending order
    sort(l.begin(), l.end());

    // Read the input number 'n' from the user
    long long n;
    cin >> n;

    // Initialize the answer variable 'ans' to 0
    long long ans = 0;

    // Iterate through the sorted vector 'l' and find the first number that is greater than or equal to 'n'
    for (long long val : l) {
        if (val >= n) {
            // Update the answer variable 'ans' with the found number and break the loop
            ans = val;
            break;
        }
    }

    // Print the answer
    cout << ans << endl;

    return 0;
}
