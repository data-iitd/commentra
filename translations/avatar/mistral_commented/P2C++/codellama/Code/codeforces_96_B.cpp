#include <iostream>
#include <vector>

using namespace std;

// Function definition to generate numbers recursively
void gen(int number, int four, int seven, vector<int> &l) {
    // Base case: if the number is greater than the limit, return
    if (number > 10000000000) {
        return;
    }

    // Recursive case 1: if the number is positive and four is equal to seven, append it to the list 'l'
    if (number > 0 && four == seven) {
        l.push_back(number);
    }

    // Recursive call for the next number generated by adding 10 to the current number and updating the values of 'four' and 'seven'
    gen(number * 10 + 4, four + 1, seven, l);

    // Recursive call for the next number generated by adding 10 to the current number and updating the values of 'four' and 'seven'
    gen(number * 10 + 7, four, seven + 1, l);
}

// Main function definition
int main() {
    // Call the 'gen' function with initial values of 0, 0, and 0
    vector<int> l;
    gen(0, 0, 0, l);

    // Sort the list 'l' in ascending order
    sort(l.begin(), l.end());

    // Read the input number 'n' from the user
    int n;
    cin >> n;

    // Initialize the answer variable 'ans' to 0
    int ans = 0;

    // Iterate through the sorted list 'l' and find the first number that is greater than or equal to 'n'
    for (int val : l) {
        if (val >= n) {
            // Update the answer variable 'ans' with the found number and break the loop
            ans = val;
            break;
        }
    }

    // Print the answer
    cout << ans << endl;

    return 0;
}

