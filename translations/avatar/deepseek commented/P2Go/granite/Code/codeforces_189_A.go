
package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	// Read input from the user
	reader := bufio.NewReader(os.Stdin)
	input, _ := reader.ReadString('\n')
	input = strings.TrimSpace(input)
	// Split the input string into a slice of strings
	arr := strings.Split(input, " ")
	// Convert the first string in the slice to an integer and assign to 'length'
	length, _ := strconv.Atoi(arr[0])
	// Convert the remaining three strings in the slice to integers and sort them in ascending order
	arr = arr[1:]
	for i := 0; i < len(arr); i++ {
		arr[i], _ = strconv.Atoi(arr[i])
	}
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	arr = append(arr, 0)
	a