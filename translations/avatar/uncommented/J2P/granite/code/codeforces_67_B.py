
import sys ; import math ; import bisect ; import re ; import itertools ; import functools ; import time ; import random ; def read ( ) : return sys.stdin.readline ( ).strip ( ) ; def readint ( ) : return int ( read ( ) ) ; def readlist ( f = readint ) : return list ( map ( f, read ( ).split ( ) ) ; def readline ( f = readint ) : return map ( f, read ( ).split ( ) ) ; def readstrings ( ) : return read ( ).split ( ) ; def readstring ( ) : return read ( ).split ( ) [ 0 ] ; def readintlist ( ) : return list ( map ( int, read ( ).split ( ) ) ; def readfloatlist ( ) : return list ( map ( float, read ( ).split ( ) ) ; def pairwise ( iterable ) : a, b = itertools.tee ( iterable ) ; next ( b, None ) ; return zip ( a, b ) ; def pairs_from ( iterable, f = lambda x : x ) : prev, item = itertools.tee ( iterable ) ; next ( item, None ) ; return zip ( map ( f, prev ), map ( f, item ) ) ; def grouper ( iterable, n, fillvalue = None ) : args = [ iter ( iterable ) ] * n ; return itertools.zip_longest ( fillvalue = fillvalue, * args ) ; def roundsign ( n, digit = 5 ) : if n >= 0 : return math.floor ( n * 10 ** digit ) / 10 ** digit ; else : return - math.ceil ( abs ( n ) * 10 ** digit ) / 10 ** digit ; def log ( * args, ** kwargs ) : if kwargs. get ( "show", False ) : print ( * args ) ; def solve ( ) : n, k = readline ( ) ; b = readintlist ( ) ; a = [ - 1 ] * n ; m = 0 ; for a_ in reversed ( range ( n ) ) : j = 0 ; while b [ a_ ] > 0 : if a [ j ] >= a_ + k : b [ a_ ] -= 1 ; j += 1 ; for i_ in range ( m, j - 1, - 1 ) : a [ i_ ] = a [ i_ - 1 ] ; a [ j - 1 ] = a_ ; m += 1 ; print ( " ".join ( map ( lambda x : str ( x + 1 ), a ) ) ; solve ( ) ;