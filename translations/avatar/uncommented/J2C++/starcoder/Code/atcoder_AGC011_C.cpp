#include <bits/stdc++.h> using namespace std ; int main ( ) { int n, m ; cin >> n >> m ; vector < vector < int > > graph ( n ) ; for ( int i = 0 ; i < m ; ++ i ) { int u, v ; cin >> u >> v ; u -- ; v -- ; graph [ u ].push_back ( v ) ; graph [ v ].push_back ( u ) ; } vector < bool > visited ( n, false ) ; vector < int > color ( n, - 1 ) ; long long one = 0, bipartite = 0, count = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( visited [ i ] ) continue ; count ++ ; bool mujun = false ; int kind = dfs ( i, 0, graph, visited, color ) ; if ( kind == 1 ) one ++ ; else if (! mujun ) bipartite ++ ; } long long total = one * ( 2 * n - one ) ; total += ( count - one ) * ( count - one ) ; total += bipartite * bipartite ; cout << total << endl ; } int dfs ( int a, int c, vector < vector < int > > & graph, vector < bool > & visited, vector < int > & color ) { if ( visited [ a ] ) { if ( color [ a ] >= 0 && color [ a ]!= c ) mujun = true ; return 0 ; } visited [ a ] = true ; color [ a ] = c ; int total = 1 ; for ( int b : graph [ a ] ) { total += dfs ( b, 1 - c, graph, visited, color ) ; } return total ; } 