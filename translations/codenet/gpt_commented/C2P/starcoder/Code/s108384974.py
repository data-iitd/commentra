#include<stdio.h>
#include<stdlib.h>

#define NIL NULL

#define LEFT(x) (x->l)
#define RIGHT(x) (x->r)
#define PARENT(x) (x->p)
#define KEY(x) (x->key)

#define IS_NIL(x) (x == NIL)
#define IS_LEAF(x) (IS_NIL(LEFT(x)) && IS_NIL(RIGHT(x)))
#define IS_ROOT(x) (PARENT(x) == NIL)
#define IS_LEFT_CHILD(x) (PARENT(x)!= NIL && PARENT(x)->l == x)
#define IS_RIGHT_CHILD(x) (PARENT(x)!= NIL && PARENT(x)->r == x)

#define LEFT_CHILD(x) (IS_LEFT_CHILD(x)? PARENT(x)->l : NIL)
#define RIGHT_CHILD(x) (IS_RIGHT_CHILD(x)? PARENT(x)->r : NIL)
#define SIBLING(x) (IS_LEFT_CHILD(x)? PARENT(x)->r : (IS_RIGHT_CHILD(x)? PARENT(x)->l : NIL))

#define MIN_KEY(x) (IS_NIL(x)? 0 : (IS_NIL(x->l)? x->key : MIN_KEY(x->l)))
#define MAX_KEY(x) (IS_NIL(x)? 0 : (IS_NIL(x->r)? x->key : MAX_KEY(x->r)))

#define INORDER(x) (IS_NIL(x)? 0 : (INORDER(x->l) + 1 + INORDER(x->r)))
#define PREORDER(x) (IS_NIL(x)? 0 : (PREORDER(x->l) + 1 + PREORDER(x->r)))

#define INSERT(x, z) (x = (z))
#define REMOVE(x, z) (x = (z))

#define SET_LEFT(x, y) (x->l = (y))
#define SET_RIGHT(x, y) (x->r = (y))
#define SET_PARENT(x, y) (x->p = (y))

#define SET_LEFT_CHILD(x, y) (SET_PARENT(y, x), SET_LEFT(x, y))
#define SET_RIGHT_CHILD(x, y) (SET_PARENT(y, x), SET_RIGHT(x, y))

#define SET_SIBLING(x, y) (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0))

#define SET_NIL(x) (x = NIL)

#define SET_KEY(x, y) (x->key = (y))

#define SET_LEFT_SIBLING(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_SIBLING(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_CHILD_NIL(x) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), NIL) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), NIL) : 0)))
#define SET_RIGHT_CHILD_NIL(x) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), NIL) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), NIL) : 0)))

#define SET_PARENT_NIL(x) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), NIL) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), NIL) : 0)))

#define SET_SIBLING_NIL(x) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), NIL) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), NIL) : 0)))

#define SET_LEFT_CHILD_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_CHILD_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_CHILD_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_CHILD_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_SIBLING_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_SIBLING_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_SIBLING_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_SIBLING_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_CHILD_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_CHILD_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_CHILD_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_CHILD_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_CHILD_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_CHILD_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_CHILD_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_CHILD_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_SIBLING_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_SIBLING_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_SIBLING_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_SIBLING_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_SIBLING_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_SIBLING_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_SIBLING_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_SIBLING_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_CHILD_LEFT_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_CHILD_LEFT_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_CHILD_LEFT_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_CHILD_LEFT_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_CHILD_RIGHT_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_CHILD_RIGHT_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_CHILD_RIGHT_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_CHILD_RIGHT_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_CHILD_LEFT_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_CHILD_LEFT_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_CHILD_LEFT_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_CHILD_LEFT_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_CHILD_RIGHT_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_CHILD_RIGHT_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_RIGHT_CHILD_RIGHT_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_RIGHT_CHILD_RIGHT_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_SIBLING_LEFT_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_SIBLING_LEFT_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_SIBLING_LEFT_RIGHT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_SIBLING_LEFT_RIGHT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))

#define SET_LEFT_SIBLING_RIGHT_LEFT_LEFT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PARENT(x), y) : 0)))
#define SET_LEFT_SIBLING_RIGHT_LEFT_RIGHT(x, y) (IS_NIL(x)? 0 : (IS_LEFT_CHILD(x)? SET_LEFT_CHILD(PARENT(x), y) : (IS_RIGHT_CHILD(x)? SET_RIGHT_CHILD(PAR